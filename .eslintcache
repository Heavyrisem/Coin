[{"C:\\Users\\insu\\Desktop\\Develop\\jg\\src\\index.js":"1","C:\\Users\\insu\\Desktop\\Develop\\jg\\src\\reportWebVitals.js":"2","C:\\Users\\insu\\Desktop\\Develop\\jg\\src\\js\\Main.js":"3","C:\\Users\\insu\\Desktop\\Develop\\jg\\src\\Master.js":"4","C:\\Users\\insu\\Desktop\\Develop\\jg\\src\\js\\Header.js":"5","C:\\Users\\insu\\Desktop\\Develop\\jg\\src\\js\\Unitchanger.js":"6","C:\\Users\\insu\\Desktop\\Develop\\jg\\src\\js\\Login.js":"7","C:\\Users\\insu\\Desktop\\Develop\\jg\\src\\js\\Trade.js":"8"},{"size":515,"mtime":1608033775792,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":8318,"mtime":1608279520864,"results":"12","hashOfConfig":"10"},{"size":2071,"mtime":1608279526968,"results":"13","hashOfConfig":"10"},{"size":278,"mtime":1608164428727,"results":"14","hashOfConfig":"10"},{"size":961,"mtime":1608277229789,"results":"15","hashOfConfig":"10"},{"size":4156,"mtime":1608279518933,"results":"16","hashOfConfig":"10"},{"size":6081,"mtime":1608279521530,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1jiscu4",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"20"},"C:\\Users\\insu\\Desktop\\Develop\\jg\\src\\index.js",[],["41","42"],"C:\\Users\\insu\\Desktop\\Develop\\jg\\src\\reportWebVitals.js",[],"C:\\Users\\insu\\Desktop\\Develop\\jg\\src\\js\\Main.js",["43","44","45","46","47","48","49","50","51","52"],"import React from 'react';\nimport logo from '../img/logo.svg';\nimport '../style/Main.css';\nimport Chart from 'chart.js';\nimport unit from './Unitchanger';\n\nimport Trade from './Trade';\nimport CountUp from 'react-countup';\n\nimport io from 'socket.io-client';\n\nimport {serverAddress} from '../Config.json';\n\nclass Main extends React.Component {\n  state = {\n    chart: undefined,\n    chartoption: {  // set chart options and data\n      // The type of chart we want to create\n      type: 'line',\n\n      // The data for our dataset\n      data: {\n        labels: ['1'],\n        datasets: [{\n          display: false,\n          label: 'Coin`s Value',\n          backgroundColor: 'rgb(255, 99, 132)',\n          borderColor: 'rgb(255, 99, 132)',\n          data: [201],\n          fill: false\n        }],\n      },\n\n      // Configuration options go here\n      options: {\n        legend: {\n            display: false\n        },\n        scales: {\n          xAxes: [{\n              gridLines: {\n                  color: \"rgba(0, 0, 0, 0)\",\n              }\n          }],\n          yAxes: [{\n            // gridLines: {\n            //     color: \"rgba(0, 0, 0, 0)\",\n            // },\n            ticks: {\n                stepSize: 200,\n                userCallback: (value, index, values) => {\n                  // console.log(unit.Killo(value));\n                  return unit.Killo(value);\n                }\n            }\n          }]\n        },\n        tooltips: {\n          callbacks: {\n            custom: function(tooltip) {\n              if (!tooltip) return;\n              // disable displaying the color box;\n              tooltip.displayColors = false;\n            },\n            label: (tooltipiItem, data) => {\n              let value = data.datasets[tooltipiItem.datasetIndex].data[tooltipiItem.index];\n              return unit.Comma(value);\n            },\n            title: function(tooltipItem, data) {\n              return;\n            }\n          }\n        }\n      }\n    },\n    serverSocket: undefined,\n    nextChartUpdate: undefined,\n    lastCoinValue: 0,\n    CoinValueStatus: 0,\n    type: undefined,\n    showTrade: false,\n    wiseSaying: {\n        Message: undefined,\n        Author: undefined\n    }\n  }\n\n  componentDidMount() {\n    this.connectSocket();\n    this.drawChart();\n    this.nextUpdateTimer();\n    this.GetWiseSaying();\n  }\n\n  connectSocket() {\n\n    this.state.serverSocket = io.connect(`${serverAddress}`);\n    this.state.serverSocket.on(\"CoinValue\", (data) => {\n      this.pushData(data);\n      this.setState({\n        type: data.type,\n        lastCoinValue: data.coinValue\n      });\n    })\n\n    this.state.serverSocket.on('connect', () => {\n      console.log(\"connected\");\n    })\n\n  }\n\n  drawChart() {\n    let chart = document.getElementById(\"realtimeValueChart\"); // get element\n\n    this.state.chart = new Chart(chart, this.state.chartoption);  // draw chart\n\n    // setInterval(this.pushData.bind(this), 50);\n  }\n\n  max(array) {\n    let mx = 0;\n    for (let i = 0; i < array.length; i++) {\n      if (mx < array[i]) mx = array[i];\n    }\n    return mx;\n  }\n  min(array) {\n    let mi = array[0];\n    for (let i = 0; i < array.length; i++) {\n      if (mi > array[i]) mi = array[i];\n    }\n    return mi;\n  }\n\n  pushData(data) {\n    if (data) {\n      // console.log(getStandardDeviation(this.state.chartoption.data.datasets[0].data))\n\n      // 하락율 계산\n      this.setState({\n        CoinValueStatus: data.coinValue - this.state.chartoption.data.datasets[0].data[this.state.chartoption.data.datasets[0].data.length-1]\n      });\n\n      this.state.chartoption.data.datasets[0].data.push(data.coinValue);\n      // console.log(parseFloat(data.coinValue).toFixed(5));\n      this.state.chartoption.data.labels.push(data.updateTime);\n      this.state.nextChartUpdate = parseFloat(data.nextUpdate/1000).toFixed(1);\n\n      if (this.state.chartoption.data.labels.length > 5) {\n        this.state.chartoption.data.labels.shift();\n        this.state.chartoption.data.datasets[0].data.shift();\n      }\n\n    }\n    \n    let tmp = this.state.chartoption.data.datasets[0].data;\n    let mx = this.max(tmp);\n    let mi = this.min(tmp);\n    tmp = ((mx-mi)/2).toFixed(5);\n    // console.log(tmp)\n\n    this.state.chartoption.options.scales.yAxes[0].ticks.stepSize = tmp;\n    this.state.chart.update();\n  }\n  nextUpdateTimer() {\n    if (this.state.nextChartUpdate > 0 && this.state.nextChartUpdate) {\n      this.setState({\n        nextChartUpdate: (this.state.nextChartUpdate-0.1).toFixed(1)\n      })\n    }\n    setTimeout(this.nextUpdateTimer.bind(this), 100);\n  }\n\n  getValueStatus() {\n    if (this.state.CoinValueStatus > 0) {\n      return({\n        color: 'red'\n      });\n    } else {\n      return({\n        color: 'blue'\n      });\n    }\n  }\n\n  hideEverything() {\n    this.props.hideLoginPanel();\n    this.setState({\n      showTrade: false\n    })\n  }\n\n  async GetWiseSaying() {\n    let ServerResponse = await fetch(`${serverAddress}/getWise`, {\n      method: 'POST'\n    });\n    ServerResponse = await ServerResponse.json();\n\n    if (ServerResponse.Author != undefined) {\n      this.setState({\n        wiseSaying: {\n          Author: ServerResponse.Author,\n          Message: ServerResponse.Message\n        }\n      })\n    } else {\n      console.log(ServerResponse);\n      this.setState({\n        wiseSaying: {\n          Author: undefined,\n          Message: \"데이터 요청에 실패하였습니다.\"\n        }\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Main\" onClick={this.hideEverything.bind(this)}>\n        {this.state.showTrade&& <Trade userInfo={this.props.userInfo} CoinValue={this.state.lastCoinValue} type={this.state.showTrade} SetBalance={this.props.SetBalance} Close={()=>{this.setState({showTrade: undefined})}} />}\n\n        <div className=\"doubleCard\">\n          <div onClickCapture={this.props.showLoginPanel} className=\"card\" style={{textAlign: 'center', backgroundColor: 'rgb(210, 210, 210)'}}>\n            {this.props.userInfo.userID? this.props.userInfo.userID:\"로그인해 주세요\"} \n          </div>\n        </div>\n\n        <div className=\"chart card\">\n          <span className=\"CoinValue\">\n            <span className=\"Value\">{<CountUp start={this.state.chartoption.data.datasets[0].data[this.state.chartoption.data.datasets[0].data.length-2]} end={this.state.lastCoinValue} formattingFn={unit.Comma}/>}</span>\n            <span className=\"ValueType\">KRW </span>\n            <span className=\"ValueStatus\" style={this.getValueStatus()}>\n            {(this.state.CoinValueStatus > 0 && this.state.CoinValueStatus)&& \"+\"}{this.state.CoinValueStatus}\n            ({(this.state.CoinValueStatus!=0)? (Math.abs(this.state.CoinValueStatus)/this.state.lastCoinValue * 100).toFixed(2)+\"%\" : \"Loading\"}) {(this.state.CoinValueStatus > 0)? <i className=\"fas fa-caret-up\"></i>: <i className=\"fas fa-caret-down\"></i>}\n            </span>\n          </span>\n          <div>\n            <canvas className=\"realtimeValueChart\" id=\"realtimeValueChart\"></canvas>\n          </div>\n        </div>\n\n        {(this.props.userInfo.userID!=undefined)&&\n          (<><div className=\"doubleCard\">\n            <div className=\"card sell trade\" onClickCapture={(e)=>{e.stopPropagation();this.setState({showTrade: \"Sell\"})}}>\n            <i className=\"fas fa-shopping-cart\"></i> 판매\n            </div>\n            <div className=\"card buy trade\" onClickCapture={(e)=>{e.stopPropagation();this.setState({showTrade: \"Buy\"})}}>\n            <i className=\"fas fa-cart-plus\"></i>  구매\n            </div>\n          </div>\n\n          <div className=\"card\">\n              <span>\n                내 코인: {(this.props.userInfo.userCoinBalance!=undefined)? unit.Comma(this.props.userInfo.userCoinBalance)+\" JG\": \"로그인해 주세요\"}\n              </span>\n          </div>          \n          <div className=\"card\">\n            <span>\n              내 화폐: {(this.props.userInfo.userMoneyBalance!=undefined)? unit.Comma(this.props.userInfo.userMoneyBalance)+\" KRW\": \"로그인해 주세요\"}\n            </span>\n          </div></>)\n        }\n\n        <div className=\"card\">\n          <div className=\"Say\">\"{this.state.wiseSaying.Message}\"</div>\n          <div className=\"Say Who\">- {this.state.wiseSaying.Author}</div>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default Main;\n","C:\\Users\\insu\\Desktop\\Develop\\jg\\src\\Master.js",["53","54","55","56"],"import React from 'react';\r\nimport './style/Master.css';\r\n\r\nimport Header from './js/Header';\r\nimport Main from './js/Main';\r\nimport Login from './js/Login';\r\n\r\nimport {serverAddress} from './Config.json';\r\n\r\nclass Master extends React.Component {\r\n    state = {\r\n        showLoginPanel: false,\r\n        userID: undefined,\r\n        userCoinBalance: 0,\r\n        userCoinBalance: 0\r\n    }\r\n\r\n    showLoginPanel(e) {\r\n        e.stopPropagation();\r\n        this.setState({\r\n            showLoginPanel: true\r\n        });\r\n    }\r\n    hideLoginPanel() {\r\n        this.setState({\r\n            showLoginPanel: false\r\n        });\r\n    }\r\n\r\n    onLogin(userID) {\r\n        this.setState({\r\n            userID: userID\r\n        });\r\n        // cookie\r\n    }\r\n\r\n\r\n\r\n    async CheckUserStatus() {\r\n        if (this.userID == undefined) return;\r\n        let ServerResponse = await fetch(`${serverAddress}/getBalance`, {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                name: this.state.userID\r\n            }),\r\n            headers: {'Context-type': 'application/json'}\r\n        });\r\n        ServerResponse = await ServerResponse.json();\r\n\r\n        if (ServerResponse.CoinBalance != undefined) this.SetBalance(ServerResponse.CoinBalance, ServerResponse.MoneyBalance);\r\n    }\r\n\r\n    SetBalance(Coin, Money) {\r\n        this.setState({\r\n            userCoinBalance: parseInt(Coin),\r\n            userMoneyBalance: parseInt(Money)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Master\">\r\n                {(this.state.userID==undefined&&this.state.showLoginPanel)&& <Login show={this.showLoginPanel.bind(this)} hide={this.hideLoginPanel.bind()} onSuccess={this.onLogin.bind(this)} SetBalance={this.SetBalance.bind(this)}/>}\r\n                <Header userInfo={this.state}/>\r\n                <Main showLoginPanel={this.showLoginPanel.bind(this)} hideLoginPanel={this.hideLoginPanel.bind(this)} userInfo={this.state} SetBalance={this.SetBalance.bind(this)}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Master;","C:\\Users\\insu\\Desktop\\Develop\\jg\\src\\js\\Header.js",[],"C:\\Users\\insu\\Desktop\\Develop\\jg\\src\\js\\Unitchanger.js",["57","58","59"],"class UnitChangerAPI {\r\n\tByteCal(bytes) {\r\n\t\tvar bytes = parseInt(bytes);\r\n\t\tvar s = [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"ZB\", \"HB\"];\r\n\r\n\t\tvar e = Math.floor(Math.log(bytes) / Math.log(1024));\r\n\r\n\t\tif (e == \"-Infinity\") return \"0 \" + s[0];\r\n\t\telse return (bytes / Math.pow(1024, Math.floor(e))).toFixed(2) + \" \" + s[e];\r\n\t}\r\n\t\r\n\tKillo(number) {\r\n\t\tnumber = parseInt(number);\r\n\t\tlet names = [\"\", \"만\", \"천만\"];\r\n\t\t\r\n\t\tlet e = Math.floor(Math.log(number) / Math.log(10000));\r\n\t\tif (e >= 2) e = 1; \r\n\t\t\r\n\t\tif (e == \"-Infinity\") return \"0 \" + names[0];\r\n\t\telse return (number / Math.pow(10000, Math.floor(e))).toFixed(2) + \"\" + names[e];\r\n\t}\r\n\r\n\tComma(number) {\r\n\t\tnumber = number.toString();\r\n\t\tvar tmp = number.split(\".\");\r\n\t\tnumber = tmp[0].split(/(?=(?:...)*$)/);\r\n\t\tnumber = number.join(\",\");\r\n\t\tif (tmp.length > 1) number = number +\".\"+ tmp[1];\r\n\t\treturn number;\r\n\t}\r\n}\r\n\r\n// module.exports = new UnitChangerAPI();\r\nexport default new UnitChangerAPI();",["60","61"],"C:\\Users\\insu\\Desktop\\Develop\\jg\\src\\js\\Login.js",["62","63","64"],"import React from 'react';\r\nimport '../style/Login.css';\r\n\r\nimport {serverAddress} from '../Config.json';\r\n\r\nclass Login extends React.Component {\r\n    state = {\r\n        ServerResponse: undefined,\r\n        register: false\r\n    }\r\n\r\n    async requestLogin() {\r\n        let ServerResponse = await fetch(`${serverAddress}/login`, {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                    id: this.id.value,\r\n                    passwd: this.passwd.value\r\n                }),\r\n            headers: {\r\n                    'content-type': 'application/json'\r\n            }\r\n        });\r\n        \r\n        ServerResponse = await ServerResponse.json();\r\n        \r\n        if (ServerResponse.id) {\r\n            this.props.onSuccess(ServerResponse.id);\r\n            this.props.SetBalance(ServerResponse.CoinBalance, ServerResponse.MoneyBalance);\r\n        }\r\n        else\r\n            this.setState({\r\n                ServerResponse: ServerResponse.msg\r\n            })\r\n            // alert(\"로그인에 실패하였습니다\");\r\n    }\r\n\r\n    async requestRegister() {\r\n        if (!this.id.value || !this.passwd.value) return this.setState({ServerResponse: \"아이디와 비밀번호는 공백일 수 없습니다.\"});\r\n        let ServerResponse = await fetch(\"http://192.168.1.71:3002/register\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                id: this.id.value,\r\n                passwd: this.passwd.value\r\n            }),\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        });\r\n        ServerResponse = await ServerResponse.json();\r\n\r\n        if (ServerResponse.id) {\r\n            this.requestLogin();\r\n        } else {\r\n            this.setState({\r\n                ServerResponse: ServerResponse.msg\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const Id = (\r\n            <span onClickCapture={e=>{e.stopPropagation();this.setState({register: true, ServerResponse: undefined})}}>\r\n                존재하지 않는 사용자 입니다. 여기를 클릭하여 생성하세요\r\n            </span>\r\n        );\r\n        const Passwd = (\r\n            <span>\r\n                비밀번호가 틀립니다.\r\n            </span>\r\n        );\r\n        const UserExists = (\r\n            <span>\r\n                이미 존재하는 사용자 입니다.\r\n            </span>\r\n        )\r\n\r\n        if (this.state.register) {\r\n            return(\r\n                <div className=\"Login\">\r\n                    <span className=\"LoginTitle\">계정 생성</span>\r\n                    <input type=\"text\" className=\"LoginInputValue\" ref={(e) => this.id = e} placeholder=\"ID\" />\r\n                    <input type=\"password\" className=\"LoginInputValue\" ref={(e) => this.passwd = e} placeholder=\"PW\" />\r\n                    <span className=\"ServerResponse\">{\r\n                        (this.state.ServerResponse)&&\r\n                        (this.state.ServerResponse == \"USER_EXISTS\")? UserExists :\r\n                        this.state.ServerResponse\r\n                    }</span>\r\n                    <div className=\"LoginSubmit\" onClick={this.requestRegister.bind(this)}>계정 생성</div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <div className=\"Login\">\r\n                    <span className=\"LoginTitle\">로그인</span>\r\n                    <input type=\"text\" className=\"LoginInputValue\" ref={(e) => this.id = e} placeholder=\"ID\" />\r\n                    <input type=\"password\" className=\"LoginInputValue\" ref={(e) => this.passwd = e} placeholder=\"PW\" />\r\n                    <span className=\"ServerResponse\">{\r\n                        (this.state.ServerResponse)&&\r\n                        (this.state.ServerResponse == \"NO_USER\")? Id :\r\n                        (this.state.ServerResponse == \"WRONG_PASSWD\")? Passwd :\r\n                        this.state.ServerResponse\r\n                    }</span>\r\n                    <div className=\"LoginSubmit\" onClick={this.requestLogin.bind(this)}>로그인</div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default Login;","C:\\Users\\insu\\Desktop\\Develop\\jg\\src\\js\\Trade.js",["65","66","67","68"],"import React from 'react';\r\nimport '../style/Trade.css';\r\n\r\nimport unit from './Unitchanger';\r\nimport {serverAddress} from '../Config.json';\r\n\r\nclass Trade extends React.Component {\r\n\r\n    state = {\r\n        calculatedValue: undefined,\r\n        message: undefined\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.InputValue = {\r\n            value: 0\r\n        }\r\n    }\r\n\r\n    stopEventBubble(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    }\r\n\r\n    async Buy(e) {\r\n        this.stopEventBubble(e);\r\n        if (this.InputValue.value < 1) return;\r\n        console.log(this.props.userInfo.userID, this.InputValue.value)\r\n        let ServerResponse = await fetch(`${serverAddress}/buy`, {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                id: this.props.userInfo.userID,\r\n                Amount: this.InputValue.value\r\n            }),\r\n            headers: {'Content-type': 'application/json'}\r\n        });\r\n        ServerResponse = await ServerResponse.json();\r\n\r\n        if (ServerResponse.CoinBalance != undefined) {\r\n            this.props.SetBalance(ServerResponse.CoinBalance, ServerResponse.MoneyBalance);\r\n            this.props.Close();\r\n        } else {\r\n            switch(ServerResponse.msg) {\r\n                case \"MONEY_NOT_ENOUGH\": {\r\n                    this.setState({\r\n                        message: \"화폐가 부족합니다.\"\r\n                    });\r\n                    break;\r\n                }\r\n                case \"USER_NOT_FOUNT\": {\r\n                    this.setState({\r\n                        message: \"알수없는 사용자 입니다.\"\r\n                    })\r\n                    break;\r\n                }\r\n                default: {\r\n                    this.setState({\r\n                        message: ServerResponse.msg\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    async Sell(e) {\r\n        this.stopEventBubble(e);\r\n        if (this.InputValue.value < 1) return;\r\n        console.log(this.props.userInfo.userID, this.InputValue.value)\r\n        let ServerResponse = await fetch(`${serverAddress}/sell`, {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                id: this.props.userInfo.userID,\r\n                Amount: this.InputValue.value\r\n            }),\r\n            headers: {'Content-type': 'application/json'}\r\n        });\r\n        ServerResponse = await ServerResponse.json();\r\n\r\n        if (ServerResponse.CoinBalance != undefined) {\r\n            this.props.SetBalance(ServerResponse.CoinBalance, ServerResponse.MoneyBalance);\r\n            this.props.Close();\r\n        } else {\r\n            switch(ServerResponse.msg) {\r\n                case \"COIN_NOT_ENOUGH\": {\r\n                    this.setState({\r\n                        message: \"코인이 부족합니다.\"\r\n                    });\r\n                    break;\r\n                }\r\n                case \"USER_NOT_FOUNT\": {\r\n                    this.setState({\r\n                        message: \"알수없는 사용자 입니다.\"\r\n                    })\r\n                    break;\r\n                }\r\n                default: {\r\n                    this.setState({\r\n                        message: ServerResponse.msg\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    FillMaxSell() {\r\n        this.InputValue.value = this.props.userInfo.userCoinBalance;\r\n    }\r\n\r\n    FillMaxBuy() {\r\n        // console.log(this.props.CoinValue, this.props.userInfo.userMoneyBalance, parseInt(this.props.userInfo.userMoneyBalance/this.props.CoinValue))\r\n        if (this.props.CoinValue > this.props.userInfo.userMoneyBalance) this.InputValue.value = 0;\r\n        else this.InputValue.value = parseInt(this.props.userInfo.userMoneyBalance/this.props.CoinValue);\r\n    }\r\n\r\n    render() {\r\n        const Sell = (\r\n            <> \r\n                <span className=\"Title\">판매</span>\r\n                <input className=\"InputValue\" type=\"number\" ref={e=>{this.InputValue = e}} onChange={()=>{this.setState({message: undefined});console.log(\"close\")}} placeholder=\"판매할 코인의 수를 입력하세요\" />\r\n                <span className=\"CalculatedValue\">{this.state.message? this.state.message : this.InputValue.value? unit.Comma(parseInt(this.InputValue.value) * this.props.CoinValue)+\" KRW\": \"받을 금액 KRW\"} </span>\r\n                <div className=\"TradeBtns\">\r\n                    <div className=\"TradeSubmit\" style={{color: 'rgb(146, 146, 146)', backgroundColor: 'rgb(231, 231, 231)'}} onClickCapture={this.FillMaxSell.bind(this)}>전체 입력</div>\r\n                    <div className=\"TradeSubmit\" onClickCapture={this.Sell.bind(this)}>확인</div>\r\n                </div>\r\n            </>\r\n        );\r\n        const Buy = (\r\n            <> \r\n                <span className=\"Title\">구매</span>\r\n                <input className=\"InputValue\" type=\"number\" ref={e=>{this.InputValue = e}} onChange={()=>{this.setState({message: undefined});console.log(\"close\")}} placeholder=\"구매할 코인의 수를 입력하세요\" />\r\n                <span className=\"CalculatedValue\">{this.state.message? this.state.message : (this.InputValue.value)? unit.Comma(parseInt(this.InputValue.value) * this.props.CoinValue)+\" KRW\": \"지불될 금액 KRW\"} </span>\r\n                <div className=\"TradeBtns\">\r\n                    <div className=\"TradeSubmit\" style={{color: 'rgb(146, 146, 146)', backgroundColor: 'rgb(231, 231, 231)'}} onClickCapture={this.FillMaxBuy.bind(this)}>전체 입력</div>\r\n                    <div className=\"TradeSubmit\" onClickCapture={this.Buy.bind(this)}>확인</div>\r\n                </div>\r\n            </>\r\n        );\r\n        const Error = <span>Error</span>;\r\n\r\n        return(\r\n            <div className=\"TradeMenu\" onClick={this.stopEventBubble}>\r\n                {\r\n                    (this.props.type == \"Sell\")? Sell :\r\n                    (this.props.type == \"Buy\")? Buy :\r\n                    Error\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Trade;",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":2,"column":8,"nodeType":"75","messageId":"76","endLine":2,"endColumn":12},{"ruleId":"77","severity":1,"message":"78","line":97,"column":5,"nodeType":"79","endLine":97,"endColumn":15},{"ruleId":"77","severity":1,"message":"78","line":115,"column":5,"nodeType":"79","endLine":115,"endColumn":15},{"ruleId":"77","severity":1,"message":"78","line":147,"column":7,"nodeType":"79","endLine":147,"endColumn":17},{"ruleId":"77","severity":1,"message":"78","line":162,"column":5,"nodeType":"79","endLine":162,"endColumn":57},{"ruleId":"80","severity":1,"message":"81","line":199,"column":31,"nodeType":"82","messageId":"83","endLine":199,"endColumn":33},{"ruleId":"80","severity":1,"message":"81","line":234,"column":42,"nodeType":"82","messageId":"83","endLine":234,"endColumn":44},{"ruleId":"80","severity":1,"message":"81","line":242,"column":37,"nodeType":"82","messageId":"83","endLine":242,"endColumn":39},{"ruleId":"80","severity":1,"message":"81","line":254,"column":60,"nodeType":"82","messageId":"83","endLine":254,"endColumn":62},{"ruleId":"80","severity":1,"message":"81","line":259,"column":59,"nodeType":"82","messageId":"83","endLine":259,"endColumn":61},{"ruleId":"84","severity":1,"message":"85","line":15,"column":9,"nodeType":"86","messageId":"83","endLine":15,"endColumn":24},{"ruleId":"80","severity":1,"message":"87","line":40,"column":25,"nodeType":"82","messageId":"83","endLine":40,"endColumn":27},{"ruleId":"80","severity":1,"message":"81","line":50,"column":40,"nodeType":"82","messageId":"83","endLine":50,"endColumn":42},{"ruleId":"80","severity":1,"message":"87","line":63,"column":36,"nodeType":"82","messageId":"83","endLine":63,"endColumn":38},{"ruleId":"88","severity":1,"message":"89","line":3,"column":7,"nodeType":"75","messageId":"90","endLine":3,"endColumn":12},{"ruleId":"80","severity":1,"message":"87","line":8,"column":9,"nodeType":"82","messageId":"83","endLine":8,"endColumn":11},{"ruleId":"80","severity":1,"message":"87","line":19,"column":9,"nodeType":"82","messageId":"83","endLine":19,"endColumn":11},{"ruleId":"69","replacedBy":"91"},{"ruleId":"71","replacedBy":"92"},{"ruleId":"80","severity":1,"message":"87","line":85,"column":52,"nodeType":"82","messageId":"83","endLine":85,"endColumn":54},{"ruleId":"80","severity":1,"message":"87","line":99,"column":52,"nodeType":"82","messageId":"83","endLine":99,"endColumn":54},{"ruleId":"80","severity":1,"message":"87","line":100,"column":52,"nodeType":"82","messageId":"83","endLine":100,"endColumn":54},{"ruleId":"80","severity":1,"message":"81","line":40,"column":40,"nodeType":"82","messageId":"83","endLine":40,"endColumn":42},{"ruleId":"80","severity":1,"message":"81","line":81,"column":40,"nodeType":"82","messageId":"83","endLine":81,"endColumn":42},{"ruleId":"80","severity":1,"message":"87","line":145,"column":38,"nodeType":"82","messageId":"83","endLine":145,"endColumn":40},{"ruleId":"80","severity":1,"message":"87","line":146,"column":38,"nodeType":"82","messageId":"83","endLine":146,"endColumn":40},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-dupe-keys","Duplicate key 'userCoinBalance'.","ObjectExpression","Expected '===' and instead saw '=='.","no-redeclare","'bytes' is already defined.","redeclared",["93"],["94"],"no-global-assign","no-unsafe-negation"]